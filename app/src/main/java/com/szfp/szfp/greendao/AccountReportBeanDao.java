package com.szfp.szfp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.szfp.bean.AccountReportBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_REPORT_BEAN".
*/
public class AccountReportBeanDao extends AbstractDao<AccountReportBean, Long> {

    public static final String TABLENAME = "ACCOUNT_REPORT_BEAN";

    /**
     * Properties of entity AccountReportBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ACNumber = new Property(1, String.class, "ACNumber", false, "ACNUMBER");
        public final static Property Deposits = new Property(2, float.class, "deposits", false, "DEPOSITS");
        public final static Property DepositsDate = new Property(3, long.class, "depositsDate", false, "DEPOSITS_DATE");
        public final static Property FarePaid = new Property(4, float.class, "farePaid", false, "FARE_PAID");
        public final static Property FarePaidDate = new Property(5, long.class, "farePaidDate", false, "FARE_PAID_DATE");
        public final static Property Balance = new Property(6, float.class, "balance", false, "BALANCE");
    }


    public AccountReportBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AccountReportBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_REPORT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACNUMBER\" TEXT," + // 1: ACNumber
                "\"DEPOSITS\" REAL NOT NULL ," + // 2: deposits
                "\"DEPOSITS_DATE\" INTEGER NOT NULL ," + // 3: depositsDate
                "\"FARE_PAID\" REAL NOT NULL ," + // 4: farePaid
                "\"FARE_PAID_DATE\" INTEGER NOT NULL ," + // 5: farePaidDate
                "\"BALANCE\" REAL NOT NULL );"); // 6: balance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_REPORT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountReportBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ACNumber = entity.getACNumber();
        if (ACNumber != null) {
            stmt.bindString(2, ACNumber);
        }
        stmt.bindDouble(3, entity.getDeposits());
        stmt.bindLong(4, entity.getDepositsDate());
        stmt.bindDouble(5, entity.getFarePaid());
        stmt.bindLong(6, entity.getFarePaidDate());
        stmt.bindDouble(7, entity.getBalance());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountReportBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ACNumber = entity.getACNumber();
        if (ACNumber != null) {
            stmt.bindString(2, ACNumber);
        }
        stmt.bindDouble(3, entity.getDeposits());
        stmt.bindLong(4, entity.getDepositsDate());
        stmt.bindDouble(5, entity.getFarePaid());
        stmt.bindLong(6, entity.getFarePaidDate());
        stmt.bindDouble(7, entity.getBalance());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountReportBean readEntity(Cursor cursor, int offset) {
        AccountReportBean entity = new AccountReportBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ACNumber
            cursor.getFloat(offset + 2), // deposits
            cursor.getLong(offset + 3), // depositsDate
            cursor.getFloat(offset + 4), // farePaid
            cursor.getLong(offset + 5), // farePaidDate
            cursor.getFloat(offset + 6) // balance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountReportBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setACNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeposits(cursor.getFloat(offset + 2));
        entity.setDepositsDate(cursor.getLong(offset + 3));
        entity.setFarePaid(cursor.getFloat(offset + 4));
        entity.setFarePaidDate(cursor.getLong(offset + 5));
        entity.setBalance(cursor.getFloat(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountReportBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountReportBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountReportBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
