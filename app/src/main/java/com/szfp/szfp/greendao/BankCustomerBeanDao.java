package com.szfp.szfp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.szfp.bean.BankCustomerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_CUSTOMER_BEAN".
*/
public class BankCustomerBeanDao extends AbstractDao<BankCustomerBean, Long> {

    public static final String TABLENAME = "BANK_CUSTOMER_BEAN";

    /**
     * Properties of entity BankCustomerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FosaAccount = new Property(1, String.class, "fosaAccount", false, "FOSA_ACCOUNT");
        public final static Property Gender = new Property(2, boolean.class, "gender", false, "GENDER");
        public final static Property Number = new Property(3, String.class, "number", false, "NUMBER");
        public final static Property MaritalStatus = new Property(4, String.class, "maritalStatus", false, "MARITAL_STATUS");
        public final static Property Model = new Property(5, String.class, "model", false, "MODEL");
        public final static Property Contacts = new Property(6, String.class, "contacts", false, "CONTACTS");
        public final static Property Branch = new Property(7, String.class, "branch", false, "BRANCH");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property NationalId = new Property(10, String.class, "nationalId", false, "NATIONAL_ID");
        public final static Property FingerPrintFileUrl = new Property(11, String.class, "fingerPrintFileUrl", false, "FINGER_PRINT_FILE_URL");
        public final static Property PhotoFileUrl = new Property(12, String.class, "photoFileUrl", false, "PHOTO_FILE_URL");
        public final static Property RegisterTimeStr = new Property(13, String.class, "registerTimeStr", false, "REGISTER_TIME_STR");
        public final static Property RegisterTime = new Property(14, Long.class, "registerTime", false, "REGISTER_TIME");
        public final static Property Deposit = new Property(15, float.class, "deposit", false, "DEPOSIT");
        public final static Property Total = new Property(16, float.class, "total", false, "TOTAL");
    }


    public BankCustomerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BankCustomerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_CUSTOMER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FOSA_ACCOUNT\" TEXT," + // 1: fosaAccount
                "\"GENDER\" INTEGER NOT NULL ," + // 2: gender
                "\"NUMBER\" TEXT," + // 3: number
                "\"MARITAL_STATUS\" TEXT," + // 4: maritalStatus
                "\"MODEL\" TEXT," + // 5: model
                "\"CONTACTS\" TEXT," + // 6: contacts
                "\"BRANCH\" TEXT," + // 7: branch
                "\"NAME\" TEXT," + // 8: name
                "\"EMAIL\" TEXT," + // 9: email
                "\"NATIONAL_ID\" TEXT," + // 10: nationalId
                "\"FINGER_PRINT_FILE_URL\" TEXT," + // 11: fingerPrintFileUrl
                "\"PHOTO_FILE_URL\" TEXT," + // 12: photoFileUrl
                "\"REGISTER_TIME_STR\" TEXT," + // 13: registerTimeStr
                "\"REGISTER_TIME\" INTEGER," + // 14: registerTime
                "\"DEPOSIT\" REAL NOT NULL ," + // 15: deposit
                "\"TOTAL\" REAL NOT NULL );"); // 16: total
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_CUSTOMER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankCustomerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fosaAccount = entity.getFosaAccount();
        if (fosaAccount != null) {
            stmt.bindString(2, fosaAccount);
        }
        stmt.bindLong(3, entity.getGender() ? 1L: 0L);
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        String maritalStatus = entity.getMaritalStatus();
        if (maritalStatus != null) {
            stmt.bindString(5, maritalStatus);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(6, model);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(7, contacts);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(8, branch);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String nationalId = entity.getNationalId();
        if (nationalId != null) {
            stmt.bindString(11, nationalId);
        }
 
        String fingerPrintFileUrl = entity.getFingerPrintFileUrl();
        if (fingerPrintFileUrl != null) {
            stmt.bindString(12, fingerPrintFileUrl);
        }
 
        String photoFileUrl = entity.getPhotoFileUrl();
        if (photoFileUrl != null) {
            stmt.bindString(13, photoFileUrl);
        }
 
        String registerTimeStr = entity.getRegisterTimeStr();
        if (registerTimeStr != null) {
            stmt.bindString(14, registerTimeStr);
        }
 
        Long registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(15, registerTime);
        }
        stmt.bindDouble(16, entity.getDeposit());
        stmt.bindDouble(17, entity.getTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankCustomerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fosaAccount = entity.getFosaAccount();
        if (fosaAccount != null) {
            stmt.bindString(2, fosaAccount);
        }
        stmt.bindLong(3, entity.getGender() ? 1L: 0L);
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        String maritalStatus = entity.getMaritalStatus();
        if (maritalStatus != null) {
            stmt.bindString(5, maritalStatus);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(6, model);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(7, contacts);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(8, branch);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String nationalId = entity.getNationalId();
        if (nationalId != null) {
            stmt.bindString(11, nationalId);
        }
 
        String fingerPrintFileUrl = entity.getFingerPrintFileUrl();
        if (fingerPrintFileUrl != null) {
            stmt.bindString(12, fingerPrintFileUrl);
        }
 
        String photoFileUrl = entity.getPhotoFileUrl();
        if (photoFileUrl != null) {
            stmt.bindString(13, photoFileUrl);
        }
 
        String registerTimeStr = entity.getRegisterTimeStr();
        if (registerTimeStr != null) {
            stmt.bindString(14, registerTimeStr);
        }
 
        Long registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(15, registerTime);
        }
        stmt.bindDouble(16, entity.getDeposit());
        stmt.bindDouble(17, entity.getTotal());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BankCustomerBean readEntity(Cursor cursor, int offset) {
        BankCustomerBean entity = new BankCustomerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fosaAccount
            cursor.getShort(offset + 2) != 0, // gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // maritalStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // model
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contacts
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // branch
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // nationalId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fingerPrintFileUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // photoFileUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // registerTimeStr
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // registerTime
            cursor.getFloat(offset + 15), // deposit
            cursor.getFloat(offset + 16) // total
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankCustomerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFosaAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.getShort(offset + 2) != 0);
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaritalStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContacts(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBranch(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNationalId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFingerPrintFileUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhotoFileUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRegisterTimeStr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRegisterTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setDeposit(cursor.getFloat(offset + 15));
        entity.setTotal(cursor.getFloat(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankCustomerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankCustomerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankCustomerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
