package com.szfp.szfp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.szfp.bean.BankDepositBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_DEPOSIT_BEAN".
*/
public class BankDepositBeanDao extends AbstractDao<BankDepositBean, Long> {

    public static final String TABLENAME = "BANK_DEPOSIT_BEAN";

    /**
     * Properties of entity BankDepositBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdNumber = new Property(1, String.class, "IdNumber", false, "ID_NUMBER");
        public final static Property AcNumber = new Property(2, String.class, "acNumber", false, "AC_NUMBER");
        public final static Property AcName = new Property(3, String.class, "acName", false, "AC_NAME");
        public final static Property BankName = new Property(4, String.class, "bankName", false, "BANK_NAME");
        public final static Property IsRecord = new Property(5, boolean.class, "isRecord", false, "IS_RECORD");
        public final static Property CashNumber = new Property(6, float.class, "cashNumber", false, "CASH_NUMBER");
        public final static Property WaihNumber = new Property(7, float.class, "waihNumber", false, "WAIH_NUMBER");
        public final static Property Balance = new Property(8, float.class, "balance", false, "BALANCE");
    }


    public BankDepositBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BankDepositBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_DEPOSIT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_NUMBER\" TEXT," + // 1: IdNumber
                "\"AC_NUMBER\" TEXT," + // 2: acNumber
                "\"AC_NAME\" TEXT," + // 3: acName
                "\"BANK_NAME\" TEXT," + // 4: bankName
                "\"IS_RECORD\" INTEGER NOT NULL ," + // 5: isRecord
                "\"CASH_NUMBER\" REAL NOT NULL ," + // 6: cashNumber
                "\"WAIH_NUMBER\" REAL NOT NULL ," + // 7: waihNumber
                "\"BALANCE\" REAL NOT NULL );"); // 8: balance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_DEPOSIT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankDepositBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String IdNumber = entity.getIdNumber();
        if (IdNumber != null) {
            stmt.bindString(2, IdNumber);
        }
 
        String acNumber = entity.getAcNumber();
        if (acNumber != null) {
            stmt.bindString(3, acNumber);
        }
 
        String acName = entity.getAcName();
        if (acName != null) {
            stmt.bindString(4, acName);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(5, bankName);
        }
        stmt.bindLong(6, entity.getIsRecord() ? 1L: 0L);
        stmt.bindDouble(7, entity.getCashNumber());
        stmt.bindDouble(8, entity.getWaihNumber());
        stmt.bindDouble(9, entity.getBalance());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankDepositBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String IdNumber = entity.getIdNumber();
        if (IdNumber != null) {
            stmt.bindString(2, IdNumber);
        }
 
        String acNumber = entity.getAcNumber();
        if (acNumber != null) {
            stmt.bindString(3, acNumber);
        }
 
        String acName = entity.getAcName();
        if (acName != null) {
            stmt.bindString(4, acName);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(5, bankName);
        }
        stmt.bindLong(6, entity.getIsRecord() ? 1L: 0L);
        stmt.bindDouble(7, entity.getCashNumber());
        stmt.bindDouble(8, entity.getWaihNumber());
        stmt.bindDouble(9, entity.getBalance());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BankDepositBean readEntity(Cursor cursor, int offset) {
        BankDepositBean entity = new BankDepositBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IdNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // acNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // acName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bankName
            cursor.getShort(offset + 5) != 0, // isRecord
            cursor.getFloat(offset + 6), // cashNumber
            cursor.getFloat(offset + 7), // waihNumber
            cursor.getFloat(offset + 8) // balance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankDepositBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAcNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAcName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsRecord(cursor.getShort(offset + 5) != 0);
        entity.setCashNumber(cursor.getFloat(offset + 6));
        entity.setWaihNumber(cursor.getFloat(offset + 7));
        entity.setBalance(cursor.getFloat(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankDepositBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankDepositBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankDepositBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
