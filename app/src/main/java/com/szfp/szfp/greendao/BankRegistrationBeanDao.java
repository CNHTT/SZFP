package com.szfp.szfp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.szfp.bean.BankRegistrationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_REGISTRATION_BEAN".
*/
public class BankRegistrationBeanDao extends AbstractDao<BankRegistrationBean, Long> {

    public static final String TABLENAME = "BANK_REGISTRATION_BEAN";

    /**
     * Properties of entity BankRegistrationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NationalID = new Property(1, String.class, "nationalID", false, "NATIONAL_ID");
        public final static Property BankName = new Property(2, String.class, "BankName", false, "BANK_NAME");
        public final static Property BankAddress = new Property(3, String.class, "bankAddress", false, "BANK_ADDRESS");
        public final static Property BankBranches = new Property(4, String.class, "bankBranches", false, "BANK_BRANCHES");
        public final static Property BankContacts = new Property(5, String.class, "bankContacts", false, "BANK_CONTACTS");
        public final static Property BankAccountTypes = new Property(6, String.class, "bankAccountTypes", false, "BANK_ACCOUNT_TYPES");
        public final static Property RegisterTimeStr = new Property(7, String.class, "registerTimeStr", false, "REGISTER_TIME_STR");
        public final static Property RegisterTime = new Property(8, Long.class, "registerTime", false, "REGISTER_TIME");
    }


    public BankRegistrationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BankRegistrationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_REGISTRATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NATIONAL_ID\" TEXT," + // 1: nationalID
                "\"BANK_NAME\" TEXT," + // 2: BankName
                "\"BANK_ADDRESS\" TEXT," + // 3: bankAddress
                "\"BANK_BRANCHES\" TEXT," + // 4: bankBranches
                "\"BANK_CONTACTS\" TEXT," + // 5: bankContacts
                "\"BANK_ACCOUNT_TYPES\" TEXT," + // 6: bankAccountTypes
                "\"REGISTER_TIME_STR\" TEXT," + // 7: registerTimeStr
                "\"REGISTER_TIME\" INTEGER);"); // 8: registerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_REGISTRATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankRegistrationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nationalID = entity.getNationalID();
        if (nationalID != null) {
            stmt.bindString(2, nationalID);
        }
 
        String BankName = entity.getBankName();
        if (BankName != null) {
            stmt.bindString(3, BankName);
        }
 
        String bankAddress = entity.getBankAddress();
        if (bankAddress != null) {
            stmt.bindString(4, bankAddress);
        }
 
        String bankBranches = entity.getBankBranches();
        if (bankBranches != null) {
            stmt.bindString(5, bankBranches);
        }
 
        String bankContacts = entity.getBankContacts();
        if (bankContacts != null) {
            stmt.bindString(6, bankContacts);
        }
 
        String bankAccountTypes = entity.getBankAccountTypes();
        if (bankAccountTypes != null) {
            stmt.bindString(7, bankAccountTypes);
        }
 
        String registerTimeStr = entity.getRegisterTimeStr();
        if (registerTimeStr != null) {
            stmt.bindString(8, registerTimeStr);
        }
 
        Long registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(9, registerTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankRegistrationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nationalID = entity.getNationalID();
        if (nationalID != null) {
            stmt.bindString(2, nationalID);
        }
 
        String BankName = entity.getBankName();
        if (BankName != null) {
            stmt.bindString(3, BankName);
        }
 
        String bankAddress = entity.getBankAddress();
        if (bankAddress != null) {
            stmt.bindString(4, bankAddress);
        }
 
        String bankBranches = entity.getBankBranches();
        if (bankBranches != null) {
            stmt.bindString(5, bankBranches);
        }
 
        String bankContacts = entity.getBankContacts();
        if (bankContacts != null) {
            stmt.bindString(6, bankContacts);
        }
 
        String bankAccountTypes = entity.getBankAccountTypes();
        if (bankAccountTypes != null) {
            stmt.bindString(7, bankAccountTypes);
        }
 
        String registerTimeStr = entity.getRegisterTimeStr();
        if (registerTimeStr != null) {
            stmt.bindString(8, registerTimeStr);
        }
 
        Long registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(9, registerTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BankRegistrationBean readEntity(Cursor cursor, int offset) {
        BankRegistrationBean entity = new BankRegistrationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nationalID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BankName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bankAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bankBranches
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bankContacts
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bankAccountTypes
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // registerTimeStr
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // registerTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankRegistrationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNationalID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBankName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankBranches(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBankContacts(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBankAccountTypes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRegisterTimeStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegisterTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankRegistrationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankRegistrationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankRegistrationBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
