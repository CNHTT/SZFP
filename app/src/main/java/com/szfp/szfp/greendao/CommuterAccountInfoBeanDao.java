package com.szfp.szfp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.szfp.bean.CommuterAccountInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMUTER_ACCOUNT_INFO_BEAN".
*/
public class CommuterAccountInfoBeanDao extends AbstractDao<CommuterAccountInfoBean, Long> {

    public static final String TABLENAME = "COMMUTER_ACCOUNT_INFO_BEAN";

    /**
     * Properties of entity CommuterAccountInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CommuterAccount = new Property(1, String.class, "CommuterAccount", false, "COMMUTER_ACCOUNT");
        public final static Property FirstName = new Property(2, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(3, String.class, "lastName", false, "LAST_NAME");
        public final static Property FullName = new Property(4, String.class, "fullName", false, "FULL_NAME");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property NationalID = new Property(6, String.class, "nationalID", false, "NATIONAL_ID");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property FingerPrintFileUrl = new Property(8, String.class, "fingerPrintFileUrl", false, "FINGER_PRINT_FILE_URL");
        public final static Property PhotoFileUrl = new Property(9, String.class, "photoFileUrl", false, "PHOTO_FILE_URL");
        public final static Property Balance = new Property(10, float.class, "balance", false, "BALANCE");
        public final static Property Deposits = new Property(11, float.class, "deposits", false, "DEPOSITS");
        public final static Property FarePaid = new Property(12, float.class, "farePaid", false, "FARE_PAID");
        public final static Property TimeStr = new Property(13, String.class, "timeStr", false, "TIME_STR");
        public final static Property TimeMills = new Property(14, Long.class, "timeMills", false, "TIME_MILLS");
    }


    public CommuterAccountInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommuterAccountInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMUTER_ACCOUNT_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMMUTER_ACCOUNT\" TEXT," + // 1: CommuterAccount
                "\"FIRST_NAME\" TEXT," + // 2: firstName
                "\"LAST_NAME\" TEXT," + // 3: lastName
                "\"FULL_NAME\" TEXT," + // 4: fullName
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"NATIONAL_ID\" TEXT," + // 6: nationalID
                "\"EMAIL\" TEXT," + // 7: email
                "\"FINGER_PRINT_FILE_URL\" TEXT," + // 8: fingerPrintFileUrl
                "\"PHOTO_FILE_URL\" TEXT," + // 9: photoFileUrl
                "\"BALANCE\" REAL NOT NULL ," + // 10: balance
                "\"DEPOSITS\" REAL NOT NULL ," + // 11: deposits
                "\"FARE_PAID\" REAL NOT NULL ," + // 12: farePaid
                "\"TIME_STR\" TEXT," + // 13: timeStr
                "\"TIME_MILLS\" INTEGER);"); // 14: timeMills
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMUTER_ACCOUNT_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommuterAccountInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CommuterAccount = entity.getCommuterAccount();
        if (CommuterAccount != null) {
            stmt.bindString(2, CommuterAccount);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(3, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(4, lastName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(5, fullName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String nationalID = entity.getNationalID();
        if (nationalID != null) {
            stmt.bindString(7, nationalID);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String fingerPrintFileUrl = entity.getFingerPrintFileUrl();
        if (fingerPrintFileUrl != null) {
            stmt.bindString(9, fingerPrintFileUrl);
        }
 
        String photoFileUrl = entity.getPhotoFileUrl();
        if (photoFileUrl != null) {
            stmt.bindString(10, photoFileUrl);
        }
        stmt.bindDouble(11, entity.getBalance());
        stmt.bindDouble(12, entity.getDeposits());
        stmt.bindDouble(13, entity.getFarePaid());
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(14, timeStr);
        }
 
        Long timeMills = entity.getTimeMills();
        if (timeMills != null) {
            stmt.bindLong(15, timeMills);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommuterAccountInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CommuterAccount = entity.getCommuterAccount();
        if (CommuterAccount != null) {
            stmt.bindString(2, CommuterAccount);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(3, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(4, lastName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(5, fullName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String nationalID = entity.getNationalID();
        if (nationalID != null) {
            stmt.bindString(7, nationalID);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String fingerPrintFileUrl = entity.getFingerPrintFileUrl();
        if (fingerPrintFileUrl != null) {
            stmt.bindString(9, fingerPrintFileUrl);
        }
 
        String photoFileUrl = entity.getPhotoFileUrl();
        if (photoFileUrl != null) {
            stmt.bindString(10, photoFileUrl);
        }
        stmt.bindDouble(11, entity.getBalance());
        stmt.bindDouble(12, entity.getDeposits());
        stmt.bindDouble(13, entity.getFarePaid());
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(14, timeStr);
        }
 
        Long timeMills = entity.getTimeMills();
        if (timeMills != null) {
            stmt.bindLong(15, timeMills);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommuterAccountInfoBean readEntity(Cursor cursor, int offset) {
        CommuterAccountInfoBean entity = new CommuterAccountInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CommuterAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fullName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nationalID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fingerPrintFileUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // photoFileUrl
            cursor.getFloat(offset + 10), // balance
            cursor.getFloat(offset + 11), // deposits
            cursor.getFloat(offset + 12), // farePaid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // timeStr
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // timeMills
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommuterAccountInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommuterAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirstName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNationalID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFingerPrintFileUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhotoFileUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBalance(cursor.getFloat(offset + 10));
        entity.setDeposits(cursor.getFloat(offset + 11));
        entity.setFarePaid(cursor.getFloat(offset + 12));
        entity.setTimeStr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTimeMills(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommuterAccountInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommuterAccountInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommuterAccountInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
