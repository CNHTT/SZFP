package com.szfp.szfp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.szfp.bean.StudentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT_BEAN".
*/
public class StudentBeanDao extends AbstractDao<StudentBean, Long> {

    public static final String TABLENAME = "STUDENT_BEAN";

    /**
     * Properties of entity StudentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirstName = new Property(1, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property FullName = new Property(3, String.class, "fullName", false, "FULL_NAME");
        public final static Property AdmissionNumber = new Property(4, String.class, "admissionNumber", false, "ADMISSION_NUMBER");
        public final static Property CaptureFingerprintFileURl = new Property(5, String.class, "captureFingerprintFileURl", false, "CAPTURE_FINGERPRINT_FILE_URL");
        public final static Property StudentPhotoFileURl = new Property(6, String.class, "studentPhotoFileURl", false, "STUDENT_PHOTO_FILE_URL");
        public final static Property Gender = new Property(7, boolean.class, "gender", false, "GENDER");
        public final static Property AdmissionDateStr = new Property(8, String.class, "admissionDateStr", false, "ADMISSION_DATE_STR");
        public final static Property AdmissionDateLong = new Property(9, long.class, "admissionDateLong", false, "ADMISSION_DATE_LONG");
        public final static Property DataOfBirthStr = new Property(10, String.class, "dataOfBirthStr", false, "DATA_OF_BIRTH_STR");
        public final static Property DataOfBirthLong = new Property(11, long.class, "dataOfBirthLong", false, "DATA_OF_BIRTH_LONG");
        public final static Property Nationality = new Property(12, String.class, "nationality", false, "NATIONALITY");
        public final static Property Department = new Property(13, int.class, "department", false, "DEPARTMENT");
        public final static Property BoardingType = new Property(14, String.class, "boardingType", false, "BOARDING_TYPE");
        public final static Property Email = new Property(15, String.class, "email", false, "EMAIL");
        public final static Property CellPhone = new Property(16, String.class, "cellPhone", false, "CELL_PHONE");
        public final static Property FirstGuardianName = new Property(17, String.class, "firstGuardianName", false, "FIRST_GUARDIAN_NAME");
        public final static Property FirstGuardianRelationship = new Property(18, String.class, "firstGuardianRelationship", false, "FIRST_GUARDIAN_RELATIONSHIP");
        public final static Property FirstGuardianContacts = new Property(19, String.class, "firstGuardianContacts", false, "FIRST_GUARDIAN_CONTACTS");
        public final static Property SecondGuardianName = new Property(20, String.class, "secondGuardianName", false, "SECOND_GUARDIAN_NAME");
        public final static Property SecondGuardianRelationship = new Property(21, String.class, "secondGuardianRelationship", false, "SECOND_GUARDIAN_RELATIONSHIP");
        public final static Property SecondGuardianContacts = new Property(22, String.class, "secondGuardianContacts", false, "SECOND_GUARDIAN_CONTACTS");
        public final static Property PermanentHomeAddress = new Property(23, String.class, "permanentHomeAddress", false, "PERMANENT_HOME_ADDRESS");
        public final static Property PresentHomeAddress = new Property(24, String.class, "presentHomeAddress", false, "PRESENT_HOME_ADDRESS");
    }


    public StudentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StudentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FIRST_NAME\" TEXT," + // 1: firstName
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"FULL_NAME\" TEXT," + // 3: fullName
                "\"ADMISSION_NUMBER\" TEXT," + // 4: admissionNumber
                "\"CAPTURE_FINGERPRINT_FILE_URL\" TEXT," + // 5: captureFingerprintFileURl
                "\"STUDENT_PHOTO_FILE_URL\" TEXT," + // 6: studentPhotoFileURl
                "\"GENDER\" INTEGER NOT NULL ," + // 7: gender
                "\"ADMISSION_DATE_STR\" TEXT," + // 8: admissionDateStr
                "\"ADMISSION_DATE_LONG\" INTEGER NOT NULL ," + // 9: admissionDateLong
                "\"DATA_OF_BIRTH_STR\" TEXT," + // 10: dataOfBirthStr
                "\"DATA_OF_BIRTH_LONG\" INTEGER NOT NULL ," + // 11: dataOfBirthLong
                "\"NATIONALITY\" TEXT," + // 12: nationality
                "\"DEPARTMENT\" INTEGER NOT NULL ," + // 13: department
                "\"BOARDING_TYPE\" TEXT," + // 14: boardingType
                "\"EMAIL\" TEXT," + // 15: email
                "\"CELL_PHONE\" TEXT," + // 16: cellPhone
                "\"FIRST_GUARDIAN_NAME\" TEXT," + // 17: firstGuardianName
                "\"FIRST_GUARDIAN_RELATIONSHIP\" TEXT," + // 18: firstGuardianRelationship
                "\"FIRST_GUARDIAN_CONTACTS\" TEXT," + // 19: firstGuardianContacts
                "\"SECOND_GUARDIAN_NAME\" TEXT," + // 20: secondGuardianName
                "\"SECOND_GUARDIAN_RELATIONSHIP\" TEXT," + // 21: secondGuardianRelationship
                "\"SECOND_GUARDIAN_CONTACTS\" TEXT," + // 22: secondGuardianContacts
                "\"PERMANENT_HOME_ADDRESS\" TEXT," + // 23: permanentHomeAddress
                "\"PRESENT_HOME_ADDRESS\" TEXT);"); // 24: presentHomeAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(4, fullName);
        }
 
        String admissionNumber = entity.getAdmissionNumber();
        if (admissionNumber != null) {
            stmt.bindString(5, admissionNumber);
        }
 
        String captureFingerprintFileURl = entity.getCaptureFingerprintFileURl();
        if (captureFingerprintFileURl != null) {
            stmt.bindString(6, captureFingerprintFileURl);
        }
 
        String studentPhotoFileURl = entity.getStudentPhotoFileURl();
        if (studentPhotoFileURl != null) {
            stmt.bindString(7, studentPhotoFileURl);
        }
        stmt.bindLong(8, entity.getGender() ? 1L: 0L);
 
        String admissionDateStr = entity.getAdmissionDateStr();
        if (admissionDateStr != null) {
            stmt.bindString(9, admissionDateStr);
        }
        stmt.bindLong(10, entity.getAdmissionDateLong());
 
        String dataOfBirthStr = entity.getDataOfBirthStr();
        if (dataOfBirthStr != null) {
            stmt.bindString(11, dataOfBirthStr);
        }
        stmt.bindLong(12, entity.getDataOfBirthLong());
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(13, nationality);
        }
        stmt.bindLong(14, entity.getDepartment());
 
        String boardingType = entity.getBoardingType();
        if (boardingType != null) {
            stmt.bindString(15, boardingType);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(16, email);
        }
 
        String cellPhone = entity.getCellPhone();
        if (cellPhone != null) {
            stmt.bindString(17, cellPhone);
        }
 
        String firstGuardianName = entity.getFirstGuardianName();
        if (firstGuardianName != null) {
            stmt.bindString(18, firstGuardianName);
        }
 
        String firstGuardianRelationship = entity.getFirstGuardianRelationship();
        if (firstGuardianRelationship != null) {
            stmt.bindString(19, firstGuardianRelationship);
        }
 
        String firstGuardianContacts = entity.getFirstGuardianContacts();
        if (firstGuardianContacts != null) {
            stmt.bindString(20, firstGuardianContacts);
        }
 
        String secondGuardianName = entity.getSecondGuardianName();
        if (secondGuardianName != null) {
            stmt.bindString(21, secondGuardianName);
        }
 
        String secondGuardianRelationship = entity.getSecondGuardianRelationship();
        if (secondGuardianRelationship != null) {
            stmt.bindString(22, secondGuardianRelationship);
        }
 
        String secondGuardianContacts = entity.getSecondGuardianContacts();
        if (secondGuardianContacts != null) {
            stmt.bindString(23, secondGuardianContacts);
        }
 
        String permanentHomeAddress = entity.getPermanentHomeAddress();
        if (permanentHomeAddress != null) {
            stmt.bindString(24, permanentHomeAddress);
        }
 
        String presentHomeAddress = entity.getPresentHomeAddress();
        if (presentHomeAddress != null) {
            stmt.bindString(25, presentHomeAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(4, fullName);
        }
 
        String admissionNumber = entity.getAdmissionNumber();
        if (admissionNumber != null) {
            stmt.bindString(5, admissionNumber);
        }
 
        String captureFingerprintFileURl = entity.getCaptureFingerprintFileURl();
        if (captureFingerprintFileURl != null) {
            stmt.bindString(6, captureFingerprintFileURl);
        }
 
        String studentPhotoFileURl = entity.getStudentPhotoFileURl();
        if (studentPhotoFileURl != null) {
            stmt.bindString(7, studentPhotoFileURl);
        }
        stmt.bindLong(8, entity.getGender() ? 1L: 0L);
 
        String admissionDateStr = entity.getAdmissionDateStr();
        if (admissionDateStr != null) {
            stmt.bindString(9, admissionDateStr);
        }
        stmt.bindLong(10, entity.getAdmissionDateLong());
 
        String dataOfBirthStr = entity.getDataOfBirthStr();
        if (dataOfBirthStr != null) {
            stmt.bindString(11, dataOfBirthStr);
        }
        stmt.bindLong(12, entity.getDataOfBirthLong());
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(13, nationality);
        }
        stmt.bindLong(14, entity.getDepartment());
 
        String boardingType = entity.getBoardingType();
        if (boardingType != null) {
            stmt.bindString(15, boardingType);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(16, email);
        }
 
        String cellPhone = entity.getCellPhone();
        if (cellPhone != null) {
            stmt.bindString(17, cellPhone);
        }
 
        String firstGuardianName = entity.getFirstGuardianName();
        if (firstGuardianName != null) {
            stmt.bindString(18, firstGuardianName);
        }
 
        String firstGuardianRelationship = entity.getFirstGuardianRelationship();
        if (firstGuardianRelationship != null) {
            stmt.bindString(19, firstGuardianRelationship);
        }
 
        String firstGuardianContacts = entity.getFirstGuardianContacts();
        if (firstGuardianContacts != null) {
            stmt.bindString(20, firstGuardianContacts);
        }
 
        String secondGuardianName = entity.getSecondGuardianName();
        if (secondGuardianName != null) {
            stmt.bindString(21, secondGuardianName);
        }
 
        String secondGuardianRelationship = entity.getSecondGuardianRelationship();
        if (secondGuardianRelationship != null) {
            stmt.bindString(22, secondGuardianRelationship);
        }
 
        String secondGuardianContacts = entity.getSecondGuardianContacts();
        if (secondGuardianContacts != null) {
            stmt.bindString(23, secondGuardianContacts);
        }
 
        String permanentHomeAddress = entity.getPermanentHomeAddress();
        if (permanentHomeAddress != null) {
            stmt.bindString(24, permanentHomeAddress);
        }
 
        String presentHomeAddress = entity.getPresentHomeAddress();
        if (presentHomeAddress != null) {
            stmt.bindString(25, presentHomeAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StudentBean readEntity(Cursor cursor, int offset) {
        StudentBean entity = new StudentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fullName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // admissionNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // captureFingerprintFileURl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // studentPhotoFileURl
            cursor.getShort(offset + 7) != 0, // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // admissionDateStr
            cursor.getLong(offset + 9), // admissionDateLong
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dataOfBirthStr
            cursor.getLong(offset + 11), // dataOfBirthLong
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // nationality
            cursor.getInt(offset + 13), // department
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // boardingType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // email
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // cellPhone
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // firstGuardianName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // firstGuardianRelationship
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // firstGuardianContacts
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // secondGuardianName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // secondGuardianRelationship
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // secondGuardianContacts
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // permanentHomeAddress
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // presentHomeAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFullName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdmissionNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCaptureFingerprintFileURl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStudentPhotoFileURl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.getShort(offset + 7) != 0);
        entity.setAdmissionDateStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdmissionDateLong(cursor.getLong(offset + 9));
        entity.setDataOfBirthStr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDataOfBirthLong(cursor.getLong(offset + 11));
        entity.setNationality(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDepartment(cursor.getInt(offset + 13));
        entity.setBoardingType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEmail(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCellPhone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFirstGuardianName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFirstGuardianRelationship(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFirstGuardianContacts(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSecondGuardianName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSecondGuardianRelationship(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSecondGuardianContacts(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPermanentHomeAddress(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPresentHomeAddress(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudentBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudentBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
